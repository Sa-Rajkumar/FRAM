# -*- coding: utf-8 -*-
"""Portfolio_Optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TiyDN4gUIjnqPxlqLsYR2KHS8kOETvnk
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from plotly import express as px
from plotly import graph_objects as go

# Define tickers
tickers = ['BAJAJHLDNG.NS', 'ASIANPAINT.NS', 'UJJIVANSFB.NS', 'BORORENEW.NS',
           'ENGINERSIN.NS', 'VBL.NS', 'FIVESTAR.NS', 'GOLD', 'BTC-USD']

# Fetch stock data from Yahoo Finance
price_data = yf.download(tickers, start='2023-04-01', end='2024-03-31')['Adj Close']

# Plot stock prices
plt.figure(figsize=(10, 6))
for ticker in tickers:
    plt.plot(price_data.index, price_data[ticker], label=ticker)
plt.title('Stock Prices')
plt.xlabel('Date')
plt.ylabel('Adjusted Price')
plt.legend()
plt.show()

# Calculate log returns
log_ret = np.log(price_data / price_data.shift(1)).dropna()

# Display first few rows of log returns
print(log_ret.head())

# Calculate mean daily returns and covariance matrix
mean_ret = log_ret.mean()
cov_mat = log_ret.cov() * 252  # Annualized

# Define portfolio weights (example: equal weights)
weights = np.array([0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.12])

# Calculate portfolio return and risk
portfolio_return = np.sum(mean_ret * weights) * 252  # Annualized
portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_mat, weights)))  # Annualized


# Print portfolio return and risk
print(f"Portfolio Return: {portfolio_return:.4f}")
print(f"Portfolio Risk: {portfolio_volatility:.4f}")

risk_free_rate = 0.0686

# Calculate Sharpe ratio
sharpe_ratio = (portfolio_return - risk_free_rate) / portfolio_volatility
print(f"Sharpe Ratio: {sharpe_ratio:.4f}")

# Generate random portfolio weights and simulate portfolios
num_portfolios = 5000
all_weights = np.zeros((num_portfolios, len(tickers)))
port_returns = np.zeros(num_portfolios)
port_volatilities = np.zeros(num_portfolios)
sharpe_ratios = np.zeros(num_portfolios)

for i in range(num_portfolios):
    # Generate random weights
    weights = np.random.random(len(tickers))
    weights = weights / np.sum(weights)

    # Save weights
    all_weights[i, :] = weights

    # Expected portfolio return and volatility
    port_return = np.sum(weights * mean_ret) * 252
    port_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_mat, weights)))

    # Store portfolio return and volatility
    port_returns[i] = port_return
    port_volatilities[i] = port_volatility

    # Store Sharpe ratio
    sharpe_ratios[i] = (port_return - risk_free_rate) / port_volatility

# Convert results to DataFrame
portfolio_results = pd.DataFrame({
    'Return': port_returns,
    'Risk': port_volatilities,
    'SharpeRatio': sharpe_ratios
})

# Get weights for the minimum variance and maximum Sharpe ratio portfolios
min_var_idx = portfolio_results['Risk'].idxmin()
max_sharpe_idx = portfolio_results['SharpeRatio'].idxmax()

min_var_port = all_weights[min_var_idx]
max_sharpe_port = all_weights[max_sharpe_idx]

# Plot efficient frontier
plt.figure(figsize=(10, 6))
plt.scatter(port_volatilities, port_returns, c=sharpe_ratios, cmap='viridis')
plt.colorbar(label='Sharpe Ratio')
plt.scatter(port_volatilities[min_var_idx], port_returns[min_var_idx], color='green', label='Min Variance', marker='*', s=200)
plt.scatter(port_volatilities[max_sharpe_idx], port_returns[max_sharpe_idx], color='red', label='Max Sharpe Ratio', marker='*', s=200)
plt.title('Portfolio Optimization & Efficient Frontier')
plt.xlabel('Annualized Risk')
plt.ylabel('Annualized Return')
plt.legend()
plt.show()

# Fetch NIFTY50 data
nifty = yf.download('^NSEI', start='2023-04-01', end='2024-03-31')['Adj Close']
nifty_log_ret = np.log(nifty / nifty.shift(1)).dropna()

# Calculate NIFTY50 return and risk
nifty_return_annual = nifty_log_ret.mean() * 252
nifty_risk_annual = nifty_log_ret.std() * np.sqrt(252)

# Add NIFTY50 to the plot
plt.figure(figsize=(10, 6))
plt.scatter(port_volatilities, port_returns, c=sharpe_ratios, cmap='viridis')
plt.colorbar(label='Sharpe Ratio')
plt.scatter(port_volatilities[min_var_idx], port_returns[min_var_idx], color='green', label='Min Variance', marker='*', s=200)
plt.scatter(port_volatilities[max_sharpe_idx], port_returns[max_sharpe_idx], color='red', label='Max Sharpe Ratio', marker='*', s=200)
plt.scatter(nifty_risk_annual, nifty_return_annual, color='yellow', label='NIFTY50', marker='D', s=200)
plt.title('Portfolio Optimization & Efficient Frontier with NIFTY50')
plt.xlabel('Annualized Risk')
plt.ylabel('Annualized Return')
plt.legend()
plt.show()

print(portfolio_return)