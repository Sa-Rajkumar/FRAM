# -*- coding: utf-8 -*-
"""CHAMBLFERT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yA-rPWVWbHHz5rgn0FdFJHlR7E-MC6Ae

#NIFTY DAILY CLOSING PRICE
"""

install.packages("quantmod")
library(quantmod)

# Get data for Nifty 50
nifty_data <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Extract the closing prices
nifty_close <- Cl(nifty_data)

# Plot the closing prices and get summary
plot(nifty_close, main = "Daily Closing Prices of Nifty 50 (April 2020 - September 2024)",
     ylab = "Closing Price", xlab = "Date", col = "purple")

nifty_close_summary <- summary(nifty_close)
print(nifty_close_summary)

"""#CHAMBLFERT DAILY CLOSING PRICE

"""

install.packages("quantmod")
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT_data <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Extract the closing prices
CHAMBLFERT_close <- Cl(CHAMBLFERT_data)

# Plot the closing prices and get summary
plot(CHAMBLFERT_close, main = "Daily Closing Prices of CHAMBLFERT (April 2020 - September 2024)",
     ylab = "Closing Price", xlab = "Date", col = "darkgreen")

CHAMBLFERT_close_summary <- summary(CHAMBLFERT_close)
print(CHAMBLFERT_close_summary)

"""#NIFTY DAILY RETURNS"""

install.packages("quantmod")
library(quantmod)

# Get data for Nifty 50
nifty_data <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Calculate daily returns
nifty_returns <- dailyReturn(Cl(nifty_data))

# Plot the daily returns and get summary
plot(nifty_returns, main = "Daily Returns of Nifty 50 (April 2020 - September 2024)",
     ylab = "Daily Return", xlab = "Date", col = "purple", type = "l")

nifty_returns_summary <- summary(nifty_returns)
print(nifty_returns_summary)

"""#CHAMBLFERT DAILY RETURNS"""

install.packages("quantmod")
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT_data <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Calculate daily returns
CHAMBLFERT_returns <- dailyReturn(Cl(CHAMBLFERT_data))

# Plot the daily returns and get summary
plot(CHAMBLFERT_returns, main = "Daily Returns of CHAMBLFERT.NS (April 2020 - September 2024)",
     ylab = "Daily Return", xlab = "Date", col = "darkgreen", type = "l")

CHAMBLFERT_returns_summary <- summary(CHAMBLFERT_returns)
print(CHAMBLFERT_returns_summary)

"""#ESTIMATING BETA USING CAPM (DAILY)

"""

install.packages("quantmod")
library(quantmod)
require(quantmod)

# Get data for Nifty 50 and CHAMBLFERT Equity
NSE <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)
NSE
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)
CHAMBLFERT

# Display the first and last 5 rows of NSE data
head(NSE, 5)
tail(NSE, 5)

# Create a data frame of the closing prices
Close <- cbind(Cl(NSE), Cl(CHAMBLFERT))
head(Close, 5)

# Calculate the returns
Returns <- as.xts(tail(data.frame(Close), -1) / head(data.frame(Close), -1) - 1)
head(Returns, 5)

# Run the regression model
regression <- lm(CHAMBLFERT.NS.Close ~ NSEI.Close, data = data.frame(Returns))

# Slope parameter = beta in CAPM model
summary(regression)

install.packages(c("quantmod", "readxl"), dependencies = TRUE)
library(quantmod)
library(readxl)

# --------------------------- BETA CALCULATION ---------------------------

NSE <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-10-01", auto.assign = FALSE) #Get data
NSE
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-10-01", auto.assign = FALSE) #Get data
CHAMBLFERT

head(NSE, 5)
tail(NSE, 5)

Close <- cbind(Cl(NSE), Cl(CHAMBLFERT)) #Dataframe of closing prices
head(Close, 5)

Returns <- as.xts(tail(data.frame(Close), -1) / head(data.frame(Close), -1) - 1) #Calculate returns
head(Returns, 5)

# Run the regression model
regression <- lm(CHAMBLFERT.NS.Close ~ NSEI.Close, data = data.frame(Returns))

# Slope parameter = beta in CAPM model
summary(regression)

# ------------------- RISK-FREE RATE CALCULATION -------------------

tbill_data <- read_excel("T-Bills_2024-2.xlsx", sheet = "Daily") #Load T-Bill Yield Data
head(tbill_data)

tbill_data$`Daily_Yield_%_Decimal` <- tbill_data$`Daily_Yield_%` / 100

avg_daily_yield <- mean(tbill_data$`Daily_Yield_%_Decimal`, na.rm = TRUE)

risk_free_rate <- (1 + avg_daily_yield)^252 - 1

cat("The annualized risk-free rate is:", round(risk_free_rate * 100, 2), "%\n")

# ------------------- MARKET RETURN CALCULATION -------------------

market_prices <- Ad(NSE)

daily_returns <- dailyReturn(market_prices, type = "log")

avg_daily_return <- mean(daily_returns, na.rm = TRUE)

annualized_return <- (1 + avg_daily_return)^252 - 1

initial_price <- as.numeric(first(market_prices))
final_price <- as.numeric(last(market_prices))

num_years <- as.numeric(difftime(index(last(market_prices)), index(first(market_prices)), units = "days")) / 365

cagr <- (final_price / initial_price)^(1 / num_years) - 1

cat("The annualized market return (CAGR) is:", round(cagr * 100, 2), "%\n")
cat("The annualized return based on average daily return is:", round(annualized_return * 100, 2), "%\n")

# ------------------- EXPECTED RETURN USING CAPM -------------------

beta <- coef(regression)["NSEI.Close"]
cat("The calculated beta for CHAMBLFERT is:", round(beta, 2), "\n")

rf <- risk_free_rate  # Annualized risk-free rate
rm <- cagr            # Market return (CAGR)

expected_return <- rf + beta * (rm - rf) #Expected return using CAPM formula
cat("The expected return for CHAMBLFERT using CAPM is:", round(expected_return * 100, 2), "%\n")

# ------------------- PLOTTING THE SECURITY MARKET LINE (SML) -------------------

sml_data <- data.frame(
  Beta = seq(-1, 2, by = 0.1),  # Range of betas from -1 to 2
  Expected_Return = rf + seq(-1, 2, by = 0.1) * (rm - rf)  # CAPM formula
)

stock_point <- data.frame(Beta = beta, Expected_Return = expected_return)

library(ggplot2) #Plot SML
sml_plot <- ggplot(data = sml_data, aes(x = Beta, y = Expected_Return)) +
  geom_line(color = "blue", size = 1.2) +  # SML line
  geom_point(data = stock_point, aes(x = Beta, y = Expected_Return), color = "red", size = 3) +  # CHAMBLFERT point
  labs(
    title = "Security Market Line (SML)",
    x = "Beta (Systematic Risk)",
    y = "Expected Return"
  ) +
  theme_minimal() +
  annotate(
    "text",
    x = beta, y = expected_return,
    label = "CHAMBLFERT",
    vjust = -1, color = "red"
  ) +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(breaks = seq(-1, 2, by = 0.5))

print(sml_plot)

"""#ARIMA MODELING (DAILY)"""

install.packages("tseries")
install.packages("ggplot2")
library(tseries)
library(ggplot2)
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)
head(CHAMBLFERT, 5)

# Calculate the Returns
Returns_CHAMBLFERT <- as.xts(tail(data.frame(CHAMBLFERT$CHAMBLFERT.NS.Close), -1)/head(data.frame(CHAMBLFERT$CHAMBLFERT.NS.Close), -1) -1, frequency = 365)
colnames(Returns_CHAMBLFERT) <- "Returns"
head(Returns_CHAMBLFERT)

# Plotting the Closing Prices and Returns
plot(Cl(CHAMBLFERT), main = "CHAMBLFERT Closing Prices", ylab = "Price", col = "blue")
plot(Returns_CHAMBLFERT, main = "CHAMBLFERT Returns", ylab = "Returns", col = "blue")

# Identifying the Model using ADF test
adf_test_result <- adf.test(Returns_CHAMBLFERT$Returns, alternative = "stationary")
print(adf_test_result)

# ACF and PACF plots to identify AR and MA terms
plot(acf(Returns_CHAMBLFERT, lag.max = 10, main = "ACF of CHAMBLFERT Returns"))  # For AR terms
plot(pacf(Returns_CHAMBLFERT, lag.max = 10, main = "PACF of CHAMBLFERT Returns"))  # For MA terms

# Fitting an ARIMA model
arima_final <- arima(Returns_CHAMBLFERT$Returns, order = c(0, 0, 1))  # Adjust ARIMA order based on ACF/PACF

# Prediction using this model
predicted <- predict(arima_final, n.ahead = 10)
print(predicted)

# Diagnostics of the model
tsdiag(arima_final)

"""#GARCH AND EGARCH MODELING (DAILY)"""

install.packages("rugarch")
install.packages("rmgarch")
library(quantmod)
library(rugarch)
library(rmgarch)

# Get data for CHAMBLFERT.NS
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)
head(CHAMBLFERT)

# Calculating Daily Returns
rCHAMBLFERT <- dailyReturn(CHAMBLFERT)
head(rCHAMBLFERT)

# Implementing Univariate GARCH specification
ug_spec <- ugarchspec()
ug_spec

# Implementing EGARCH specification
eg_spec <- ugarchspec(variance.model = list(model = "eGARCH"))
eg_spec

# Estimating the GARCH model
ugfit <- ugarchfit(spec = ug_spec, data = rCHAMBLFERT)
ugfit

# Forecasting using the fitted GARCH model
ugforecast <- ugarchforecast(ugfit, n.ahead = 10)
ugforecast

"""#NIFTY WEEKLY CLOSING PRICE"""

install.packages("quantmod")
library(quantmod)

# Get data for Nifty 50
nifty_data <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Extract the weekly closing prices
nifty_weekly <- to.weekly(nifty_data, indexAt = "lastof", drop.time = TRUE)
nifty_weekly_close <- Cl(nifty_weekly)  # Closing prices for each week

# Plot the weekly closing prices and get summary
plot(nifty_weekly_close, main = "Weekly Closing Prices of Nifty 50 (April 2020 - September 2024)",
     ylab = "Weekly Closing Price", xlab = "Date", col = "purple", type = "l")

nifty_weekly_summary <- summary(nifty_weekly_close)
print(nifty_weekly_summary)

"""#CHAMBLFERT WEEKLY CLOSING PRICE"""

install.packages("quantmod")
library(quantmod)

# Get data for CHAMBLFERT
CHAMBLFERT_data <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to weekly data
CHAMBLFERT_weekly <- to.weekly(CHAMBLFERT_data, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_weekly_close <- Cl(CHAMBLFERT_weekly)  # Extract weekly closing prices

# Plot the weekly closing prices and get summary
plot(CHAMBLFERT_weekly_close, main = "Weekly Closing Prices of CHAMBLFERT (April 2020 - September 2024)",
     ylab = "Weekly Closing Price", xlab = "Date", col = "darkgreen", type = "l")

CHAMBLFERT_weekly_summary <- summary(CHAMBLFERT_weekly_close)
print(CHAMBLFERT_weekly_summary)

"""#NIFTY WEEKLY RETURNS"""

install.packages("quantmod")
library(quantmod)

# Get data for Nifty 50
nifty_data <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to weekly data and extract weekly closing prices
nifty_weekly <- to.weekly(nifty_data, indexAt = "lastof", drop.time = TRUE)
nifty_weekly_close <- Cl(nifty_weekly)

# Calculate weekly returns
nifty_weekly_returns <- weeklyReturn(nifty_weekly_close)

# Plot the weekly returns and get summary
plot(nifty_weekly_returns, main = "Weekly Returns of Nifty 50 (April 2020 - September 2024)",
     ylab = "Weekly Return", xlab = "Date", col = "purple", type = "l")

nifty_weekly_returns_summary <- summary(nifty_weekly_returns)
print(nifty_weekly_returns_summary)

"""#CHAMBLFERT WEEKLY RETURNS"""

install.packages("quantmod")
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT_data <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to weekly data and extract weekly closing prices
CHAMBLFERT_weekly <- to.weekly(CHAMBLFERT_data, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_weekly_close <- Cl(CHAMBLFERT_weekly)

# Calculate weekly returns
CHAMBLFERT_weekly_returns <- weeklyReturn(CHAMBLFERT_weekly_close)

# Plot the weekly returns and get summary
plot(CHAMBLFERT_weekly_returns, main = "Weekly Returns of CHAMBLFERT.NS (April 2020 - September 2024)",
     ylab = "Weekly Return", xlab = "Date", col = "darkgreen", type = "l")

CHAMBLFERT_weekly_returns_summary <- summary(CHAMBLFERT_weekly_returns)
print(CHAMBLFERT_weekly_returns_summary)

"""#ESTIMATING BETA USING CAPM (WEEKLY)

"""

install.packages("quantmod")
library(quantmod)
require(quantmod)

# Get data for Nifty 50 and CHAMBLFERT Equity
NSE <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to weekly data and extract weekly closing prices
NSE_weekly <- to.weekly(NSE, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_weekly <- to.weekly(CHAMBLFERT, indexAt = "lastof", drop.time = TRUE)

# Create a data frame of weekly closing prices
Close_weekly <- cbind(Cl(NSE_weekly), Cl(CHAMBLFERT_weekly))
colnames(Close_weekly) <- c("NSEI.Close", "CHAMBLFERT.NS.Close")

# Calculate the weekly returns
Returns_weekly <- na.omit(weeklyReturn(Close_weekly))

# Display the first few rows of the weekly returns
head(Returns_weekly, 5)

# Run the regression model for weekly returns
regression_weekly <- lm(CHAMBLFERT.NS.Close ~ NSEI.Close, data = data.frame(Returns_weekly))

# Plot the weekly returns and regression line
plot(Returns_weekly$NSEI.Close, Returns_weekly$CHAMBLFERT.NS.Close,
     main = "Weekly Returns Regression: CHAMBLFERT vs. Nifty 50",
     xlab = "Nifty 50 Weekly Return", ylab = "CHAMBLFERT Weekly Return", col = "blue", pch = 19)
abline(regression_weekly, col = "red", lwd = 2)

# Display the summary of the regression model (Slope parameter = beta in CAPM model)
summary(regression_weekly)

"""#ARIMA MODELING (WEEKLY)"""

install.packages("tseries")
install.packages("ggplot2")
library(tseries)
library(ggplot2)
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to weekly and get weekly closing prices and calculating weekly returns
CHAMBLFERT_weekly <- to.weekly(CHAMBLFERT, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_weekly_close <- Cl(CHAMBLFERT_weekly)
Returns_CHAMBLFERT_weekly <- diff(log(CHAMBLFERT_weekly_close))
colnames(Returns_CHAMBLFERT_weekly) <- "Returns"
head(Returns_CHAMBLFERT_weekly)

# Plotting the Weekly Closing Prices and Returns
plot(CHAMBLFERT_weekly_close, main = "CHAMBLFERT Weekly Closing Prices", ylab = "Price", col = "blue")
plot(Returns_CHAMBLFERT_weekly, main = "CHAMBLFERT Weekly Returns", ylab = "Returns", col = "blue")

# Identifying the Model using ADF test on weekly returns
adf_test_result <- adf.test(Returns_CHAMBLFERT_weekly, alternative = "stationary")
print(adf_test_result)

# ACF and PACF plots to identify AR and MA terms
acf(Returns_CHAMBLFERT_weekly, lag.max = 10, main = "ACF of CHAMBLFERT Weekly Returns")  # For AR terms
pacf(Returns_CHAMBLFERT_weekly, lag.max = 10, main = "PACF of CHAMBLFERT Weekly Returns")  # For MA terms

# Fitting an ARIMA model to weekly returns
arima_final_weekly <- arima(Returns_CHAMBLFERT_weekly, order = c(0, 0, 1))  # Adjust ARIMA order based on ACF/PACF

# Prediction using this model
predicted_weekly <- predict(arima_final_weekly, n.ahead = 10)
print(predicted_weekly)

# Diagnostics of the model
tsdiag(arima_final_weekly)

"""#GARCH AND EGARCH MODELING (WEEKLY)

"""

install.packages("quantmod")
install.packages("rugarch")
install.packages("rmgarch")
library(quantmod)
library(rugarch)
library(rmgarch)

# Getting data for CHAMBLFERT
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to weekly and get the closing prices
CHAMBLFERT_weekly <- to.weekly(CHAMBLFERT, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_weekly_close <- Cl(CHAMBLFERT_weekly)

# Calculating Weekly Returns
rCHAMBLFERT_weekly <- diff(log(CHAMBLFERT_weekly_close))  # Log returns for weekly data
colnames(rCHAMBLFERT_weekly) <- "Weekly_Returns"
head(rCHAMBLFERT_weekly)

# Implementing Univariate GARCH specification for weekly data
ug_spec <- ugarchspec()
ug_spec

# Implementing EGARCH specification for weekly data
eg_spec <- ugarchspec(variance.model = list(model = "eGARCH"))
eg_spec

# Estimating the GARCH model
ugfit_weekly <- ugarchfit(spec = ug_spec, data = rCHAMBLFERT_weekly)
print(ugfit_weekly)

# Forecasting using the fitted GARCH model
ugforecast_weekly <- ugarchforecast(ugfit_weekly, n.ahead = 10)
print(ugforecast_weekly)

# Plot the forecasts for weekly returns
plot(ugforecast_weekly, main = "10-Week Ahead Forecasts for Weekly Returns of CHAMBLFERT.NS")

"""#NIFTY MONTHLY CLOSING PRICE



"""

install.packages("quantmod")
library(quantmod)

# Get data for Nifty 50
nifty_data <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert to monthly data and extract the monthly closing prices
nifty_monthly <- to.monthly(nifty_data, indexAt = "lastof", drop.time = TRUE)
nifty_monthly_close <- Cl(nifty_monthly)  # Closing prices for each month

# Plot the monthly closing prices and get summary
plot(nifty_monthly_close, main = "Monthly Closing Prices of Nifty 50 (April 2020 - September 2024)",
     ylab = "Monthly Closing Price", xlab = "Date", col = "purple", type = "l")

nifty_monthly_summary <- summary(nifty_monthly_close)
print(nifty_monthly_summary)

"""#CHAMBLFERT MONTHLY CLOSING PRICE



"""

install.packages("quantmod")
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT_data <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to monthly data
CHAMBLFERT_monthly <- to.monthly(CHAMBLFERT_data, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_monthly_close <- Cl(CHAMBLFERT_monthly)  # Extract monthly closing prices

# Plot the monthly closing prices and get summary
plot(CHAMBLFERT_monthly_close, main = "Monthly Closing Prices of CHAMBLFERT (April 2020 - September 2024)",
     ylab = "Monthly Closing Price", xlab = "Date", col = "darkgreen", type = "l")

CHAMBLFERT_monthly_summary <- summary(CHAMBLFERT_monthly_close)
print(CHAMBLFERT_monthly_summary)

"""#NIFTY MONTHLY RETURNS

"""

install.packages("quantmod")
library(quantmod)

# Get data for Nifty 50
nifty_data <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to monthly data and extract monthly closing prices
nifty_monthly <- to.monthly(nifty_data, indexAt = "lastof", drop.time = TRUE)
nifty_monthly_close <- Cl(nifty_monthly)

# Calculate monthly returns
nifty_monthly_returns <- monthlyReturn(nifty_monthly_close)

# Plot the monthly returns and get summary
plot(nifty_monthly_returns, main = "Monthly Returns of Nifty 50 (April 2020 - September 2024)",
     ylab = "Monthly Return", xlab = "Date", col = "purple", type = "l")

nifty_monthly_returns_summary <- summary(nifty_monthly_returns)
print(nifty_monthly_returns_summary)

"""#CHAMBLFERT MONTHLY RETURNS"""

install.packages("quantmod")
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT_data <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to monthly data and extract monthly closing prices
CHAMBLFERT_monthly <- to.monthly(CHAMBLFERT_data, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_monthly_close <- Cl(CHAMBLFERT_monthly)

# Calculate monthly returns
CHAMBLFERT_monthly_returns <- monthlyReturn(CHAMBLFERT_monthly_close)

# Plot the monthly returns and get summary
plot(CHAMBLFERT_monthly_returns, main = "Monthly Returns of CHAMBLFERT.NS (April 2020 - September 2024)",
     ylab = "Monthly Return", xlab = "Date", col = "darkgreen", type = "l")

CHAMBLFERT_monthly_returns_summary <- summary(CHAMBLFERT_monthly_returns)
print(CHAMBLFERT_monthly_returns_summary)

"""#ESTIMATING BETA USING CAPM (MONTHLY)

"""

install.packages("quantmod")
library(quantmod)
require(quantmod)

# Get data for Nifty 50 and CHAMBLFERT Equity
NSE <- getSymbols("^NSEI", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to monthly data and extract monthly closing prices
NSE_monthly <- to.monthly(NSE, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_monthly <- to.monthly(CHAMBLFERT, indexAt = "lastof", drop.time = TRUE)

# Create a data frame of monthly closing prices
Close_monthly <- cbind(Cl(NSE_monthly), Cl(CHAMBLFERT_monthly))
colnames(Close_monthly) <- c("NSEI.Close", "CHAMBLFERT.NS.Close")

# Calculate the monthly returns
Returns_monthly <- na.omit(monthlyReturn(Close_monthly))

# Display the first few rows of the monthly returns
head(Returns_monthly, 5)

# Run the regression model for monthly returns
regression_monthly <- lm(CHAMBLFERT.NS.Close ~ NSEI.Close, data = data.frame(Returns_monthly))

# Plot the monthly returns and regression line
plot(Returns_monthly$NSEI.Close, Returns_monthly$CHAMBLFERT.NS.Close,
     main = "Monthly Returns Regression: CHAMBLFERT vs. Nifty 50",
     xlab = "Nifty 50 Monthly Return", ylab = "CHAMBLFERT Monthly Return", col = "blue", pch = 19)
abline(regression_monthly, col = "red", lwd = 2)

# Display the summary of the regression model (Slope parameter = beta in CAPM model)
summary(regression_monthly)

"""#ARIMA MODELING (MONTHLY)

"""

install.packages("tseries")
install.packages("ggplot2")
install.packages("quantmod")
library(tseries)
library(ggplot2)
library(quantmod)

# Get data for CHAMBLFERT.NS
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to monthly and extract monthly closing prices, then calculate monthly returns
CHAMBLFERT_monthly <- to.monthly(CHAMBLFERT, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_monthly_close <- Cl(CHAMBLFERT_monthly)
Returns_CHAMBLFERT_monthly <- diff(log(CHAMBLFERT_monthly_close))
colnames(Returns_CHAMBLFERT_monthly) <- "Returns"
head(Returns_CHAMBLFERT_monthly)

# Plotting the Monthly Closing Prices and Returns
plot(CHAMBLFERT_monthly_close, main = "CHAMBLFERT Monthly Closing Prices", ylab = "Price", col = "blue")
plot(Returns_CHAMBLFERT_monthly, main = "CHAMBLFERT Monthly Returns", ylab = "Returns", col = "blue")

# Identifying the Model using ADF test on monthly returns
adf_test_result_monthly <- adf.test(Returns_CHAMBLFERT_monthly, alternative = "stationary")
print(adf_test_result_monthly)

# ACF and PACF plots to identify AR and MA terms for monthly returns
acf(Returns_CHAMBLFERT_monthly, lag.max = 10, main = "ACF of CHAMBLFERT Monthly Returns")  # For AR terms
pacf(Returns_CHAMBLFERT_monthly, lag.max = 10, main = "PACF of CHAMBLFERT Monthly Returns")  # For MA terms

# Fitting an ARIMA model to monthly returns (Adjust ARIMA order based on ACF/PACF analysis)
arima_final_monthly <- arima(Returns_CHAMBLFERT_monthly, order = c(0, 0, 1))

# Prediction using the fitted ARIMA model for monthly returns
predicted_monthly <- predict(arima_final_monthly, n.ahead = 10)
print(predicted_monthly)

# Diagnostics of the model
tsdiag(arima_final_monthly)

"""#GARCH AND EGARCH MODELING (MONTHLY)"""

install.packages("quantmod")
install.packages("rugarch")
install.packages("rmgarch")
library(quantmod)
library(rugarch)
library(rmgarch)

# Getting data for CHAMBLFERT.NS
CHAMBLFERT <- getSymbols("CHAMBLFERT.NS", from = "2020-04-01", to = "2024-09-30", auto.assign = FALSE)

# Convert daily data to monthly and get the closing prices
CHAMBLFERT_monthly <- to.monthly(CHAMBLFERT, indexAt = "lastof", drop.time = TRUE)
CHAMBLFERT_monthly_close <- Cl(CHAMBLFERT_monthly)

# Calculating Monthly Returns
rCHAMBLFERT_monthly <- diff(log(CHAMBLFERT_monthly_close))  # Log returns for monthly data
colnames(rCHAMBLFERT_monthly) <- "Monthly_Returns"
head(rCHAMBLFERT_monthly)

# Implementing Univariate GARCH specification for monthly data
ug_spec_monthly <- ugarchspec()
ug_spec_monthly

# Implementing EGARCH specification for monthly data
eg_spec_monthly <- ugarchspec(variance.model = list(model = "eGARCH"))
eg_spec_monthly

# Estimating the GARCH model on monthly data
ugfit_monthly <- ugarchfit(spec = ug_spec_monthly, data = rCHAMBLFERT_monthly)
print(ugfit_monthly)

# Forecasting using the fitted GARCH model for monthly data
ugforecast_monthly <- ugarchforecast(ugfit_monthly, n.ahead = 10)
print(ugforecast_monthly)

# Plot the forecasts for monthly returns
plot(ugforecast_monthly, main = "10-Month Ahead Forecasts for Monthly Returns of CHAMBLFERT.NS")

#Estimating the EGARCH model
egfit <- ugarchfit(spec = eg_spec, data = rCHAMBLFERT)
egfit

# Forecasting using the fitted EGARCH model
egforecast <- ugarchforecast(egfit, n.ahead = 10)
egforecast